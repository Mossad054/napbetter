import React, { useState } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';
import { 
  TrendingUp, 
  TrendingDown, 
  Activity, 
  Heart, 
  Moon, 
  Brain,
  BarChart3,
  Award,
  Target,
  Lightbulb
} from 'lucide-react-native';
import { COLORS, SPACING, BORDER_RADIUS, TYPOGRAPHY } from '@/constants/theme';
import { ActivityCorrelation, DailyRecommendation } from '@/types/mood';
import SleepSupport from '@/components/SleepSupport';

interface CorrelationAnalysisProps {
  correlations: ActivityCorrelation[];
  recommendations: DailyRecommendation[];
}

export default function CorrelationAnalysis({ correlations, recommendations }: CorrelationAnalysisProps) {
  const [showSleepSupport, setShowSleepSupport] = useState<boolean>(false);

  const renderCorrelationCard = (correlation: ActivityCorrelation) => {
    const getImpactColor = (impact: number) => {
      if (impact > 1) return COLORS.success;
      if (impact > 0) return COLORS.warning;
      if (impact < -1) return COLORS.error;
      return COLORS.textSecondary;
    };

    const getImpactIcon = (impact: number) => {
      if (impact > 0) return <TrendingUp color={getImpactColor(impact)} size={16} />;
      if (impact < 0) return <TrendingDown color={getImpactColor(impact)} size={16} />;
      return null;
    };

    return (
      <View key={correlation.activityId} style={styles.correlationCard}>
        <View style={styles.correlationHeader}>
          <Activity color={COLORS.primary} size={20} />
          <Text style={styles.correlationTitle}>{correlation.activityName}</Text>
          <Text style={styles.correlationFrequency}>{correlation.frequency}x</Text>
        </View>
        
        <View style={styles.correlationImpacts}>
          <View style={styles.impactItem}>
            <Heart color={COLORS.error} size={16} />
            <Text style={styles.impactLabel}>Mood</Text>
            {getImpactIcon(correlation.moodImpact)}
            <Text style={[styles.impactValue, { color: getImpactColor(correlation.moodImpact) }]}>
              {correlation.moodImpact > 0 ? '+' : ''}{correlation.moodImpact.toFixed(1)}
            </Text>
          </View>
          
          <View style={styles.impactItem}>
            <Moon color={COLORS.primary} size={16} />
            <Text style={styles.impactLabel}>Sleep</Text>
            {getImpactIcon(correlation.sleepImpact)}
            <Text style={[styles.impactValue, { color: getImpactColor(correlation.sleepImpact) }]}>
              {correlation.sleepImpact > 0 ? '+' : ''}{correlation.sleepImpact.toFixed(1)}
            </Text>
          </View>
          
          <View style={styles.impactItem}>
            <Brain color={COLORS.success} size={16} />
            <Text style={styles.impactLabel}>Clarity</Text>
            {getImpactIcon(correlation.clarityImpact)}
            <Text style={[styles.impactValue, { color: getImpactColor(correlation.clarityImpact) }]}>
              {correlation.clarityImpact > 0 ? '+' : ''}{correlation.clarityImpact.toFixed(1)}
            </Text>
          </View>
        </View>
      </View>
    );
  };

  const renderRecommendationCard = (recommendation: DailyRecommendation) => {
    const getRecommendationIcon = (type: DailyRecommendation['type']) => {
      switch (type) {
        case 'activity':
          return <Activity color={COLORS.primary} size={20} />;
        case 'intimacy':
          return <Heart color={'#FF69B4'} size={20} />;
        case 'sleep':
          return <Moon color={COLORS.primary} size={20} />;
        case 'mood':
          return <Heart color={COLORS.error} size={20} />;
        default:
          return <Lightbulb color={COLORS.warning} size={20} />;
      }
    };

    return (
      <View key={recommendation.id} style={styles.recommendationCard}>
        <View style={styles.recommendationHeader}>
          {getRecommendationIcon(recommendation.type)}
          <View style={styles.recommendationContent}>
            <Text style={styles.recommendationSuggestion}>{recommendation.suggestion}</Text>
            <Text style={styles.recommendationReason}>{recommendation.reason}</Text>
          </View>
        </View>
        
        {recommendation.wasFollowed !== undefined && (
          <View style={styles.recommendationFeedback}>
            <Text style={styles.feedbackLabel}>
              {recommendation.wasFollowed ? 'Followed' : 'Not followed'}
            </Text>
            {recommendation.effectiveness && (
              <Text style={styles.effectivenessText}>
                Effectiveness: {recommendation.effectiveness}/5
              </Text>
            )}
          </View>
        )}
      </View>
    );
  };

  const renderQuickActions = () => (
    <View style={styles.quickActions}>
      <TouchableOpacity
        style={styles.quickActionButton}
        onPress={() => setShowSleepSupport(true)}
      >
        <Moon color={COLORS.primary} size={24} />
        <Text style={styles.quickActionText}>Sleep Help</Text>
      </TouchableOpacity>
    </View>
  );

  // Render achievements
  const renderAchievements = () => (
    <View style={styles.section}>
      <View style={styles.sectionHeader}>
        <Award color={COLORS.primary} size={20} />
        <Text style={styles.sectionTitle}>Recent Achievements</Text>
      </View>
      
      <View style={styles.achievementsList}>
        <View style={styles.achievementBadge}>
          <Award color={COLORS.warning} size={24} />
          <Text style={styles.achievementText}>7-Day Streak</Text>
        </View>
        
        <View style={styles.achievementBadge}>
          <Moon color={COLORS.primary} size={24} />
          <Text style={styles.achievementText}>Sleep Master</Text>
        </View>
        
        <View style={styles.achievementBadge}>
          <Brain color={COLORS.success} size={24} />
          <Text style={styles.achievementText}>Mental Clarity</Text>
        </View>
      </View>
    </View>
  );

  return (
    <View style={styles.container}>
      <ScrollView showsVerticalScrollIndicator={false}>
        {/* Quick Actions */}
        {renderQuickActions()}

        {/* Activity Correlations */}
        <View style={styles.section}>
          <View style={styles.sectionHeader}>
            <BarChart3 color={COLORS.primary} size={20} />
            <Text style={styles.sectionTitle}>Activity Impact Analysis</Text>
          </View>
          <Text style={styles.sectionSubtitle}>
            How different activities affect your mood, sleep, and mental clarity
          </Text>
          
          <View style={styles.correlationsList}>
            {correlations.map(renderCorrelationCard)}
          </View>
        </View>

        {/* Daily Recommendations */}
        <View style={styles.section}>
          <View style={styles.sectionHeader}>
            <Target color={COLORS.primary} size={20} />
            <Text style={styles.sectionTitle}>Smart Recommendations</Text>
          </View>
          <Text style={styles.sectionSubtitle}>
            Personalized suggestions based on your patterns
          </Text>
          
          <View style={styles.recommendationsList}>
            {recommendations.map(renderRecommendationCard)}
          </View>
        </View>

        {/* Achievement Badges */}
        {renderAchievements()}
      </ScrollView>

      {/* Modals */}
      <SleepSupport
        visible={showSleepSupport}
        onClose={() => setShowSleepSupport(false)}
        onTutorialComplete={(completion) => {
          console.log('Tutorial completed:', completion);
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  quickActions: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    paddingHorizontal: SPACING.lg,
    paddingVertical: SPACING.md,
    backgroundColor: COLORS.surface,
    marginBottom: SPACING.lg,
    borderRadius: BORDER_RADIUS.lg,
    marginHorizontal: SPACING.lg,
  },
  quickActionButton: {
    alignItems: 'center',
    padding: SPACING.md,
  },
  quickActionText: {
    ...TYPOGRAPHY.caption,
    color: COLORS.text,
    marginTop: SPACING.xs,
    fontWeight: '600',
  },
  section: {
    marginBottom: SPACING.xl,
    paddingHorizontal: SPACING.lg,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: SPACING.sm,
  },
  sectionTitle: {
    ...TYPOGRAPHY.h4,
    color: COLORS.text,
    marginLeft: SPACING.sm,
  },
  sectionSubtitle: {
    ...TYPOGRAPHY.body,
    color: COLORS.textSecondary,
    marginBottom: SPACING.lg,
  },
  correlationsList: {
    gap: SPACING.md,
  },
  correlationCard: {
    backgroundColor: COLORS.surface,
    borderRadius: BORDER_RADIUS.md,
    padding: SPACING.md,
    shadowColor: COLORS.shadow,
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  correlationHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: SPACING.md,
  },
  correlationTitle: {
    ...TYPOGRAPHY.body,
    color: COLORS.text,
    fontWeight: '600',
    flex: 1,
    marginLeft: SPACING.sm,
  },
  correlationFrequency: {
    ...TYPOGRAPHY.caption,
    color: COLORS.textSecondary,
    fontWeight: '600',
  },
  correlationImpacts: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  impactItem: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: SPACING.xs,
  },
  impactLabel: {
    ...TYPOGRAPHY.caption,
    color: COLORS.textSecondary,
  },
  impactValue: {
    ...TYPOGRAPHY.caption,
    fontWeight: 'bold',
  },
  recommendationsList: {
    gap: SPACING.md,
  },
  recommendationCard: {
    backgroundColor: COLORS.surface,
    borderRadius: BORDER_RADIUS.md,
    padding: SPACING.md,
    shadowColor: COLORS.shadow,
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  recommendationHeader: {
    flexDirection: 'row',
    alignItems: 'flex-start',
  },
  recommendationContent: {
    flex: 1,
    marginLeft: SPACING.sm,
  },
  recommendationSuggestion: {
    ...TYPOGRAPHY.body,
    color: COLORS.text,
    fontWeight: '600',
    marginBottom: SPACING.xs,
  },
  recommendationReason: {
    ...TYPOGRAPHY.caption,
    color: COLORS.textSecondary,
  },
  recommendationFeedback: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: SPACING.md,
    paddingTop: SPACING.md,
    borderTopWidth: 1,
    borderTopColor: COLORS.border,
  },
  feedbackLabel: {
    ...TYPOGRAPHY.caption,
    color: COLORS.textSecondary,
    fontWeight: '600',
  },
  effectivenessText: {
    ...TYPOGRAPHY.caption,
    color: COLORS.primary,
    fontWeight: '600',
  },
  achievementsList: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    flexWrap: 'wrap',
    gap: SPACING.md,
  },
  achievementBadge: {
    backgroundColor: COLORS.surface,
    borderRadius: BORDER_RADIUS.md,
    padding: SPACING.md,
    alignItems: 'center',
    minWidth: 100,
    shadowColor: COLORS.shadow,
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  achievementText: {
    ...TYPOGRAPHY.caption,
    color: COLORS.text,
    marginTop: SPACING.xs,
    textAlign: 'center',
    fontWeight: '600',
  },
});